{"version":3,"file":"static/js/278.2544f778.chunk.js","mappings":"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","sources":["components/API.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n// Trending\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f9bf05506ad1ee4c133a8c572dbb21a2';\nasync function getTrending(page) {\n  const { data } = await axios.get(\n    `${BASE_URL}trending/movie/week?api_key=${KEY}&page=${page}&language=en-US`\n  );\n\n  return data.results;\n}\n// Find MOVIE by id\nasync function getMovieById(movieId) {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&append_to_response=videos&language=en-US`\n  );\n  return data;\n}\n// Find CAST by id\nasync function getCastById(movieId) {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return data.cast;\n}\n// Find REVIEWS by id\nasync function getReviewsById(movieId) {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return data.results;\n}\n\n// Find MOVIES by Name\nasync function getMoviesByQuery(searchQuery) {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return data.results;\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getCastById,\n  getReviewsById,\n  getMoviesByQuery,\n};\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { getMoviesByQuery } from 'components/API';\nimport {\n  Form,\n  Input,\n  Button,\n  Gallery,\n  Item,\n  Image,\n  Title,\n  Text,\n} from './Movies.styled';\nimport { BsSearch } from 'react-icons/bs';\n\nconst MovieSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') {\n      return setSearchParams({});\n    }\n\n    async function getMovie() {\n      try {\n        const searchedMovies = await getMoviesByQuery(query);\n        setMovies(searchedMovies);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    setSearchParams({ query });\n    getMovie();\n  }, [query, setSearchParams]);\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: e.target.input.value });\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <Form onSubmit={onFormSubmit}>\n        <Input type=\"text\" name=\"input\" />\n        <Button>\n          <BsSearch\n            style={{\n              marginRight: '10px',\n            }}\n          />\n          Search\n        </Button>\n      </Form>\n      <Gallery>\n        {movies.map(\n          ({ id, poster_path, title, vote_average, release_date }) => {\n            const rating = vote_average?.toFixed(1);\n            return (\n              <Item key={id}>\n                <Link to={`/movies/${id}`} state={{ from: location }}>\n                  <Image\n                    src={\n                      poster_path\n                        ? 'https://image.tmdb.org/t/p/w500' + poster_path\n                        : 'https://lands-tube.it.landsd.gov.hk/AVideo/view/img/notfound_portrait.jpg'\n                    }\n                    alt={title}\n                  />\n                  <Title>\n                    {title} | {release_date?.toString().slice(0, 4)}\n                  </Title>\n                  <Text>\n                    <b>Average: </b>\n                    {rating}\n                  </Text>\n                </Link>\n              </Item>\n            );\n          }\n        )}\n      </Gallery>\n    </div>\n  );\n};\nexport default MovieSearch;\n"],"names":["BASE_URL","KEY","getTrending","page","axios","data","results","getMovieById","movieId","getCastById","cast","getReviewsById","getMoviesByQuery","searchQuery","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","searchedMovies","console","log","getMovie","onSubmit","e","preventDefault","target","input","value","reset","type","name","style","marginRight","map","id","poster_path","title","vote_average","release_date","rating","toFixed","Link","to","state","from","src","alt","toString","slice"],"sourceRoot":""}